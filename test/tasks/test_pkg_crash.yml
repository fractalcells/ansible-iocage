---
# Ansible managed

# Expect iocage to crash with expected message(s).
# Status:
# pass ..... module crash with expected message(s)
# fail ..... module crash without expected message(s)
# crash .... module does not crash

- ansible.builtin.set_fact:
    _crash: false

- block:
    - name: " >>> TEST START: test_pkg_crash: Check if pkg info does not work in not-started jail {{ jname }}"
      iocage:
        {
          "cmd": "info",
          "name": "{{ jname }}",
          "state": "pkg"
        }
      register: result
    - ansible.builtin.debug:
        var: result
      when: debug2|bool
    - ansible.builtin.import_tasks: custom_stats_crash.yml
  rescue:
    - ansible.builtin.set_fact:
        _crash: true
    - ansible.builtin.debug:
        var: ansible_failed_result
      when: debug|bool

- block:
    - ansible.builtin.assert:
        fail_msg: "[ERR] {{ _test_name }}: Failed: {{ ansible_failed_result.msg }}"
        success_msg: "[OK]  {{ _test_name }}: Passed: {{ ansible_failed_result.msg }}"
        that:
          - _msg1 == ansible_failed_result.msg or _msg2 == ansible_failed_result.msg
    - ansible.builtin.import_tasks: custom_stats_pass.yml
  rescue:
    - ansible.builtin.debug:
        msg: "[ERR] {{ _test_name }} failed. Missing: {{ _msg1 }} or {{ _msg2 }}"
      when: debug|bool
    - ansible.builtin.import_tasks: custom_stats_fail.yml
  vars:
    _msg1: "Jail '{{ jname }}' doesn't exist"
    _msg2: "Jail '{{ jname }}' not running"
  when: _crash
