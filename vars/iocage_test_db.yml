---
iocage_test_db:

  # sanity:
  #   template: sanity

  facts:
    template: command
    label: 'facts: Get all iocage_* facts by default'
    debug:
      - msg: |-
          iocage_releases = {{ lbr }} ansible_facts.iocage_releases {{ rbr }}
          iocage_templates.keys() = {{ lbr }} ansible_facts.iocage_templates.keys()|list {{ rbr }}
          iocage_jails.keys() = {{ lbr }} ansible_facts.iocage_jails.keys()|list {{ rbr }}
    assert:
      - 'not result.changed'
      - 'not result.failed'
      - 'result.stderr_lines|length == 0'
      - 'result.stdout_lines|length == 0'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed.'

  fetch:
    template: command
    label: 'fetch: Check if release {{ lbr }} release {{ rbr }} exists'
    iocage:
      state: fetched
      release: "{{ lbr }} release {{ rbr }}"
    assert:
      - 'result.msg is search(release)'
      - 'not result.changed'
      - 'not result.failed'
      - 'result.stderr_lines|length == 0'
      - 'result.stdout_lines|length == 0'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed.'

  base_create:
    template: command
    label: 'base_create: Check if {{ lbr }} basejail {{ rbr }} can be created'
    iocage:
      state: basejail
      name: '{{ lbr }} basejail {{ rbr }}'
      release: '{{ lbr }} release {{ rbr }}'
    debug:
      - var: result.msg
    assert:
      - '_msg1 in result.msg or _msg2 == result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }} or {{ lbr }} _msg2 {{ rbr }}'
    vars:
      _msg1: "\"Jail '{{ lbr }} basejail {{ rbr }}' was created with properties {}.\""
      _msg2: "\"{{ lbr }} basejail {{ rbr }} already exists\""

  base_exists:
    template: command
    label: 'base_exists: Check if {{ lbr }} basejail {{ rbr }} exists'
    iocage:
      state: exists
      name: '{{ lbr }} basejail {{ rbr }}'
    debug:
      - var: result.msg
    assert:
      - '_msg1 == result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Miising: {{ lbr }} _msg1 {{ rbr }}'
    vars:
      _msg1: "\"Jail {{ lbr }} basejail {{ rbr }} exists\""

  base_set:
    template: command
    label: 'base_set: Verify that {{ lbr }} basejail {{ rbr }} can be converted'
    iocage:
      state: set
      name: '{{ lbr }} basejail {{ rbr }}'
      properties:
        template: "no"
    debug:
      - var: result.msg
      - var: iocage_templates[basejail].properties.template
    assert:
      - '_msg1 in result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }}'
    vars:
      _msg1: "\"already set for jail {{ lbr }} basejail {{ rbr }}\""

  base_clone:
    template: command
    label: 'base_clone: Check if {{ lbr }} jname {{ rbr }} can be cloned'
    iocage:
      state: cloned
      name: '{{ lbr }} jname {{ rbr }}'
      clone_from: '{{ lbr }} basejail {{ rbr }}'
    debug:
      - var: result.msg
    assert:
      - '_msg1 in result.msg or _msg2 == result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }} or {{ lbr }} _msg2 {{ rbr }}'
    vars:
      _msg1: "\"'{{ lbr }} jname {{ rbr }}' was created with properties {}.\""
      _msg2: "\"{{ lbr }} jname {{ rbr }} already exists\""

  jail_absent:
    template: command
    label: 'jail_absent: Check if cloned jail {{ lbr }} jname {{ rbr }} can be destroyed'
    iocage:
      state: absent
      name: '{{ lbr }} jname {{ rbr }}'
    debug:
      - var: result.msg
    assert:
      - '_msg1 == result.msg or _msg2 == result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }} or {{ lbr }} _msg2 {{ rbr }}'
    vars:
      _msg1: "\"Jail '{{ lbr }} jname {{ rbr }}' was destroyed., Jail {{ lbr }} jname {{ rbr }} removed from iocage_jails.\""
      _msg2: "\"Jail {{ lbr }} jname {{ rbr }} is already absent.\""

  jail_restore:
    template: command
    label: 'jail_restore: Verify that base jail {{ lbr }} basejail {{ rbr }} can be converted back'
    iocage:
      state: set
      name: '{{ lbr }} basejail {{ rbr }}'
      properties:
        template: 'yes'
    debug:
      - var: iocage_templates[basejail].properties.template
      - var: result.msg
    assert:
      - '_msg1 in result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }}'
    vars:
      _msg1: "\"already set for jail {{ lbr }} basejail {{ rbr }}\""

  template_create:
    template: command
    label: 'template_create: Check if template {{ lbr }} basejail {{ rbr }} can be created'
    iocage:
      state: template
      name: '{{ lbr }} basejail {{ rbr }}'
      release: '{{ lbr }} release {{ rbr }}'
    debug:
      - var: result.msg
    assert:
      - '_msg1 in result.msg or _msg2 in result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }} or {{ lbr }} _msg2 {{ rbr }}'
    vars:
      _msg1: "\"{{ lbr }} basejail {{ rbr }} was created\""
      _msg2: "\"{{ lbr }} basejail {{ rbr }} already exists\""

  template_start:
    template: command_crash
    label: 'template_start: Check if template {{ lbr }} basejail {{ rbr }} can not be started'
    iocage:
      state: started
      name: '{{ lbr }} basejail {{ rbr }}'
    assert:
      - '_msg1 in ansible_failed_result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }}'
    vars:
      _msg1: "\"Jail {{ lbr }} basejail {{ rbr }} could not be started\""

  # template_start_force:
  #   template: to_be_done

  template_stop:
    template: command
    label: 'template_stop: Check if template {{ lbr }} basejail {{ rbr }} can not be stopped'
    iocage:
      state: stopped
      name: '{{ lbr }} basejail {{ rbr }}'
    debug:
      - var: result.msg
    assert:
      - '_msg1 in result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }}'
    vars:
      _msg1: "\"Jail {{ lbr }} basejail {{ rbr }} already stopped\""

  absent_absent:
    template: command
    label: 'absent_absent: Check if absent jail can be destroyed'
    iocage:
      state: absent
      name: absent
    debug:
      - var: result.msg
    assert:
      - '_msg1 == result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }}'
    vars:
      _msg1: "\"Jail absent is already absent.\""

  absent_stop:
    template: command_crash
    label: 'absent_stop: Check if absent jail can not be stopped'
    iocage:
      state: stopped
      name: absent
    assert:
      - '_msg1 == ansible_failed_result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }}'
    vars:
      _msg1: "\"Jail 'absent' doesn't exist\""

  absent_restart:
    template: command_crash
    label: 'absent_restart: Check if absent jail can not be restarted'
    iocage:
      state: restarted
      name: absent
    assert:
      - '_msg1 == ansible_failed_result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }}'
    vars:
      _msg1: "\"Jail 'absent' doesn't exist\""

  absent_start:
    template: command_crash
    label: 'absent_start: Check if absent jail can not be started'
    iocage:
      state: started
      name: absent
    assert:
      - '_msg1 == ansible_failed_result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }}'
    vars:
      _msg1: "\"Jail 'absent' doesn't exist\""

  test_present:
    template: command
    label: 'test_present: Check if {{ lbr }} jname {{ rbr }} can be created'
    iocage:
      state: present
      name: '{{ lbr }} jname {{ rbr }}'
    debug:
      - var: result.msg
    assert:
      - '_msg1 in result.msg or _msg2 == result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }} or {{ lbr }} _msg2 {{ rbr }}'
    vars:
      _msg1: "\"Jail '{{ lbr }} jname {{ rbr }}' was created with properties {}.\""
      _msg2: "\"{{ lbr }} jname {{ rbr }} already exists\""

  test_absent:
    template: command
    label: 'test_absent: Check if jail {{ lbr }} jname {{ rbr }} can be destroyed'
    iocage:
      state: absent
      name: '{{ lbr }} jname {{ rbr }}'
    debug:
      - var: result.msg
    assert:
      - '_msg1 == result.msg or _msg2 == result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }} or {{ lbr }} _msg2 {{ rbr }}'
    vars:
      _msg1: "\"Jail '{{ lbr }} jname {{ rbr }}' was destroyed., Jail {{ lbr }} jname {{ rbr }} removed from iocage_jails.\""
      _msg2: "\"Jail {{ lbr }} jname {{ rbr }} is already absent.\""

  test_clone:
    template: command
    label: 'test_clone: Check if test jail can be cloned'
    iocage:
      state: cloned
      name: '{{ lbr }} jname {{ rbr }}'
      clone_from: '{{ lbr }} basejail {{ rbr }}'
    debug:
      - var: result.msg
    assert:
      - '_msg1 in result.msg or _msg2 == result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }} or {{ lbr }} _msg2 {{ rbr }}'
    vars:
      _msg1: "\"Jail '{{ lbr }} jname {{ rbr }}' was created with properties {}.\""
      _msg2: "\"{{ lbr }} jname {{ rbr }} already exists\""

  test_pkg:
    template: command_crash
    label: 'test_pkg: Check if pkg info does not work in not-started jail {{ lbr }} jname {{ rbr }}'
    iocage:
      state: pkg
      name: '{{ lbr }} jname {{ rbr }}'
      cmd: 'info'
    assert:
      - '_msg1 in ansible_failed_result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }}'
    vars:
      _msg1: "\"Jail '{{ lbr }} jname {{ rbr }}' not running\""

  test_start:
    template: command
    label: 'test_start: Check if jail {{ lbr }} jname {{ rbr }} can be started'
    iocage:
      state: started
      name: '{{ lbr }} jname {{ rbr }}'
    debug:
      - var: result.msg
    assert:
      - '_msg1 in result.msg or _msg2 == result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }} or {{ lbr }} _msg2 {{ rbr }}'
    vars:
      _msg1: "\"Jail {{ lbr }} jname {{ rbr }} was started.\""
      _msg2: "\"Jail {{ lbr }} jname {{ rbr }} already started\""

  test_start2:
    template: command
    label: 'test_start2: Check if jail {{ lbr }} jname {{ rbr }} can be started'
    iocage:
      state: started
      name: '{{ lbr }} jname {{ rbr }}'
    debug:
      - var: result.msg
    assert:
      - '_msg2 == result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg2 {{ rbr }}'
    vars:
      _msg2: "\"Jail {{ lbr }} jname {{ rbr }} already started\""

  test_exec:
    template: command
    label: 'test_exec: Check if exec works in jail {{ lbr }} jname {{ rbr }}'
    iocage:
      state: exec
      name: '{{ lbr }} jname {{ rbr }}'
      cmd: "\"/bin/ls -la /root\""
    debug:
      - var: result.msg
    assert:
      - '_msg1 in result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }}'
    vars:
      _msg1: "\"rc: 0\""

  test_restart:
    template: command
    label: 'test_restart: Check if jail {{ lbr }} jname {{ rbr }} can be restarted'
    iocage:
      state: restarted
      name: '{{ lbr }} jname {{ rbr }}'
    debug:
      - var: result.msg
    assert:
      - '_msg1 in result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }}'
    vars:
      _msg1: "\"Jail {{ lbr }} jname {{ rbr }} was restarted.\""

  test_stop:
    template: command
    label: 'test_stop: Check if jail {{ lbr }} jname {{ rbr }} can be stopped'
    iocage:
      state: stopped
      name: '{{ lbr }} jname {{ rbr }}'
    debug:
      - var: result.msg
    assert:
      - '_msg1 in result.msg or _msg2 == result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }} or {{ lbr }} _msg2 {{ rbr }}'
    vars:
      _msg1: "\"Jail {{ lbr }} jname {{ rbr }} was stopped.\""
      _msg2: "\"Jail {{ lbr }} jname {{ rbr }} already stopped\""

  test_start3:
    template: command
    label: 'test_start3: Check if jail {{ lbr }} jname {{ rbr }} can be started again'
    iocage:
      state: started
      name: '{{ lbr }} jname {{ rbr }}'
    debug:
      - var: result.msg
    assert:
      - '_msg1 in result.msg or _msg2 == result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }} or {{ lbr }} _msg2 {{ rbr }}'
    vars:
      _msg1: "\"Jail {{ lbr }} jname {{ rbr }} was started.\""
      _msg2: "\"Jail {{ lbr }} jname {{ rbr }} already started\""

  test_absent2:
    template: command
    label: 'test_absent2: Check if jail {{ lbr }} jname {{ rbr }} can be destroyed'
    iocage:
      state: absent
      name: '{{ lbr }} jname {{ rbr }}'
    debug:
      - var: result.msg
    assert:
      - '_msg1 in result.msg or _msg2 == result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg1 {{ rbr }} or {{ lbr }} _msg2 {{ rbr }}'
    vars:
      _msg1: "\"Jail '{{ lbr }} jname {{ rbr }}' was destroyed., Jail {{ lbr }} jname {{ rbr }} removed from iocage_jails.\""
      _msg2: "\"Jail {{ lbr }} jname {{ rbr }} is already absent.\""

  test_absent3:
    template: command
    label: 'test_absent3: Check if jail {{ lbr }} jname {{ rbr }} can be destroyed again'
    iocage:
      state: absent
      name: '{{ lbr }} jname {{ rbr }}'
    debug:
      - var: result.msg
    assert:
      - '_msg2 == result.msg'
    msg_err: '[ERR] {{ lbr }} _test_name {{ rbr }} failed. Missing: {{ lbr }} _msg2 {{ rbr }}'
    vars:
      _msg2: "\"Jail {{ lbr }} jname {{ rbr }} is already absent.\""
